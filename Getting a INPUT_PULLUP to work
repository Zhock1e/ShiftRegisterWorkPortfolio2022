//I have done so so damn many iterations of this and I accidently deleted one iterartion that worked on the arduino coding platform SO I'm gonna use this now 

// *THIS is the functioning singular button inbuilt LED code *
void setup() {
  Serial.begin(9600);
  pinMode(2, INPUT_PULLUP);
  pinMode(13, OUTPUT);
}

void loop() {
  //read the pushbutton value into a variable
  int sensorVal = digitalRead(2);
  //print out the value of the pushbutton
  Serial.println(sensorVal);
  if (sensorVal == HIGH) {
    digitalWrite(13, LOW);
  } else {
    digitalWrite(13, HIGH);
  }
}







// Now to make this code lightup a regular output LED
// WOO IT WORKS :D

const int LED = 9;

void setup() {
  Serial.begin(9600);
  pinMode(2, INPUT_PULLUP);
  pinMode(9, OUTPUT);
}

void loop() {
  //read the pushbutton value into a variable
  int sensorVal = digitalRead(2);
  //print out the value of the pushbutton
  Serial.println(sensorVal);
  if (sensorVal == HIGH) {
    digitalWrite(LED, LOW);
  } else {
    digitalWrite(LED, HIGH);
  }
}








/// AIGHT now time to- (I don't know how informal this is allowed to be pease don't deduct marks ahaha) make the button pressing code work for an LED IN my circut pre much MAKE IT WORK WITH SHIFT REGISTER.

const int DataPin = 4; // SER Pin
const int ClockPin = 5; // RCLK9 Pin
const int LatchPin = 6; // SRCLK Pin

const int ButtonZero = 12; //Frnech Numbers add to the fun, I solely just       ✨✨ w a n t e d    t o ✨✨ 
const int ButtonUn = 11; //I started with Zero instead of un to align with the LEDs. The first LED to the left is on Q0, second from the left on Q1 etc. I wanted the button variables names to have some sense of connection.
const int ButtonDeux = 10;
const int ButtonTrois = 9;
const int ButtonQuatre = 8;
const int ButtonCinq = 7;
const int ButtonSix = 6;
const int ButtonSept = 5;


void setup() {
Serial.begin(9600);
pinMode(DataPin, OUTPUT);
pinMode(ClockPin, OUTPUT);
pinMode(LatchPin, OUTPUT);

pinMode(ButtonZero, INPUT_PULLUP); // Changed the code from e.g "pinMode(ButtonZero, INPUT)" to "pinMode(ButtonZero, INPUT_PULLUP)". This decreases code I need to write, instead of button == high light up corresponding LED INPUT_PULLUP does this function for me with less code
pinMode(ButtonUn, INPUT_PULLUP);
pinMode(ButtonDeux, INPUT_PULLUP);
pinMode(ButtonTrois, INPUT_PULLUP);
pinMode(ButtonQuatre, INPUT_PULLUP);
pinMode(ButtonCinq, INPUT_PULLUP);
pinMode(ButtonSix, INPUT_PULLUP);
pinMode(ButtonSept, INPUT_PULLUP);

}

// digitalWrite(ClockPin, LOW);
// shiftOut(DataPin,LatchPin,MSBFIRST,B10101010); // To check all LEDs replace B1... with '255'.
// digitalWrite(ClockPin, HIGH);


void loop(){
 digitalWrite(ClockPin, LOW);
 int sensorVal = digitalRead(6);
  //print out the value of the pushbutton
  Serial.println(sensorVal);
  if (sensorVal == HIGH) {
    shiftOut(DataPin,LatchPin,MSBFIRST,B10101010);
   // digitalWrite(LED, LOW);
  } else {
//    digitalWrite(LED, HIGH);
    
  }
}

    
int sensorValue = digitalRead(ButtonZero) //Reading buttons value into a variable
Serial.println(sensorValue); //print the recorded value
// "INPUT_PULLUP" inverts the buttons logic. HIGH when open (LED on), LOW when pressed (LED off).
if (sensorValue == HIGH); {
digitalWrite(13, LOW);
} else {
digitalWrite(13, HIGH);
}

}














// This is just a mess of trying to figure out the code through different iterations :) 
const int DataType = 4; // SER input Pin
const int LatchPin = 5; // Output Register clock 
const int ClockPin = 6; // SRCLR Pin 

const int ButtonUn = 7;
const int ButtonDeux = 8;
const int ButtonTrois = 9;

//const int LedUn = 
//const int LedDeux = 

void setup()
{
 // pinMode(DataType,OUPUT);
 // pinMode(LatchPin,OUPUT);
 // pinMode(ClockPin,OUPUT);
  
  pinMode(7, INPUT_PULLUP);
  pinMode(LED_BUILTIN, OUTPUT);
  
  //digitalWrite(LatchPin, LOW);
  //shiftOut(DataType,ClockPin,MSBFIRST,B10101010); //Shifting MSB first 
  //digitalWrite(LatchPin, HIGH) // LatchPin is high releaseing the data
    
}

void loop() {
  int sensorVal = digitalRead(7);
  Serial.println(sensorVal);


  if (sensorVal == HIGH) {
    digitalWrite(LED_BUILTIN, LOW);
  } else {
    digitalWrite(LED_BUILTIN, HIGH);
  }
}
